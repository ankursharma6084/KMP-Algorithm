
1367. Linked List in Binary Tree
Medium

1552

51

Add to List

Share
Given a binary tree root and a linked list with head as the first node. 

Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.


Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true
Explanation: Nodes in blue form a subpath in the binary Tree.  


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    vector<int> convert(ListNode* head)
    {
         vector<int> arr ;
        
         while(head != NULL) {
             arr.push_back(head->val) ;
             head = head->next ;
         }
        
        return arr ;
    }
    
    bool find(TreeNode* root , int j , vector<int> &lps , vector<int> &arr)
    {
        if(j == lps.size()) return true ;
        if(root == NULL) return false ;
        
        while(j > 0 && root->val != arr[j])
            j = lps[j-1] ;
        
        
        if(root->val == arr[j]) j++ ;
        
        return find(root->left , j , lps , arr) | find(root->right , j , lps , arr) ;
    }
    
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        
        
         vector<int> arr = convert(head) ;
         int n = arr.size() ;
         vector<int> lps(arr.size()) ;

         for(int i=1 , j = 0 ; i<n; i++)
         {
             while(j > 0 && arr[i] != arr[j])
                 j = lps[j-1] ;
             
             if(arr[i] == arr[j]) j++ ;
             lps[i] = j ;
         }
        
         return find(root , 0 , lps , arr) ;
        
    }
};
